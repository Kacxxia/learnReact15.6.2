@startuml MountComponent
:**Mount Component**|
:type|
fork
  :CompositeComponent;
  :**create instance**|
  fork
    :Stateless<
    :invoke;
  fork again
    :Stateful<
    :new;
  end fork
  :**call WillMount() life cycle**
  supress the pedning states;
  :**get render element**|
  fork
    :Stateless<
    :the returned result;
  fork again
    :Stateful<
    :call render();
  end fork
  :**Mount render component**
  instantiate render component.
  GO __Mount Component__;
  :call DidMount() lifecycle;
  :**attach ref if needed**;
  -[dashed]->
fork again
  :DOMComponent;
  :**create DOM Element/Node**;
  :**update DOM props**
  update props/attrs that exists in nextProps,
  remove/unset those are not;
  :**build a tree to store the node and dom tree of its childs**
  create a Tree(LazyTree) to store the node, children, content;
  if (children are text?) then (yes)
    :set the content of tree;
  else (no)
    :**mount children**>
    :**instantiate children**
    traverse and instantiate children,
    store (name, childInst) to childInstances;
    :**mount**
    loop childInstances and mount
    GO __MountComponent__;
    :insert the result tree to the parent node tree;
    if (ie(8-11) or Edge?) then (yes)
      :store tree, delay the DOM insertion;
    else (no) 
      :appendChild to the parent node;
    endif
  endif
  :**attach ref if needed**;
end fork
:return the whole DOM tree;
stop
@enduml