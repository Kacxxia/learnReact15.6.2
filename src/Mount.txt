@startuml
title Mount
Entity ReactMount
participant _renderSubtreeIntoContainer
Entity React 
Entity "ReactElement\(validate*)"
participant _renderNewRootComponent
Entity InstantiateReactComponent
Entity ReactUpdates
Entity Transaction
participant batchedMountComponentIntoNode
Entity ReactReconcileTransaction
participant mountComponentIntoNode
Entity ReactDOMContainerInfo
Entity ReactReconciler
participant mountImageIntoNode
Entity DOMLazyTree

[-> ReactMount: render(//nextElement//, //container//, //callback//)
ReactMount -> _renderSubtreeIntoContainer: parentComponent, ...
ReactMount -> React: createElement(//TopLevelWrapper//, //child:nextElement//)
React -> "ReactElement\(validate*)": createElement(...)
return TopLevelWrapperElement
React -> ReactMount: TopLevelWrapperElement:**NextWrappedElement**
alt if !parentComponent
  ReactMount -> _renderNewRootComponent: NextWrappedElement
  _renderNewRootComponent -> InstantiateReactComponent: instantiate(NextWrappedElement)
  return componentInstance
  _renderNewRootComponent -> ReactUpdates: batchUpdates(//batchedMountComponentIntoNode//, //componentInstance//, //container//)
  ReactUpdates -> Transaction: **perform**
  Transaction -> batchedMountComponentIntoNode: (componentInstance, container, transaction...)
  batchedMountComponentIntoNode -> ReactReconcileTransaction: getPooled, perform mountComponentIntoNode
  ReactReconcileTransaction -> Transaction: **Start**
  ReactReconcileTransaction -> Transaction: **perform** mountComponentIntoNode
  Transaction -> mountComponentIntoNode: (instance, ...)
  mountComponentIntoNode -> ReactDOMContainerInfo: container
  return info(_node, _tag, ...)
  mountComponentIntoNode -> ReactReconciler: mountComponent(instance, transaction, containerInfo)
  return markup
  mountComponentIntoNode -> mountImageIntoNode: (markup, container, shouldReuseMarkup...)
  alt !shouldReuseMarkup
    mountImageIntoNode -> mountImageIntoNode: remove all children of container
    alt if ie/edge
      mountImageIntoNode -> DOMLazyTree: insert children one by one
    else
      mountImageIntoNode -> DOMLazyTree: insert whole tree
    end
  end
  mountComponentIntoNode -> Transaction: **Close**
else 
  ...
end
  




@enduml