@startuml ReceiveComponent
:**Receive Component**|
:**detach ref if changed**;
:**update component itself**;
:type;
fork
  :CompositeComponent;
  :**maybe call willReceiveProps lifecycle**
  depending on whether ether props or context changed;
  :**Calc nextState**
  surpress pending states;
  :**should we update the component?**|
  fork
    :**if have called forceupdate**;
  fork again
    :**Or depending on the shouldComponentUpdate() lifecycle**
    shouldComponentUpdate() lifecycle;
  fork again 
    :**Or if the component is pure**
    isShallowEqual(prevProps, nextProps), (state, nextState);
  end fork
  if (should?) then (yes)
    :**call willUpdate() lifecycle**;
    :**update props.state,context**;
    :**maybe update rendered component**
    get latest rendered element from render() lifecycle>
    if (only do updates when\nthe component still render nothing \nOr still render text\nOr type and key remains same) then (meet)
      :**update rendered component**
      GO __ReceiveComponent__;
    else
      :**Replace rendered component and node**>
      :**unmount the prev rendered component**
      GO __Unmount Component__;
      :**instantiate the next element**;
      :**mount the next component, get its markup**
      GO __Mount Component__;
      :**replace the old DOM node with the new markup**;
    endif
    :**maybe update rendered component end**<
    :**call didUpdate() lifecycle**;
  else (no)
    :**update props,state,context, skip update procedure**;
  endif
fork again
  :DOMComponent;
  :**update DOM props**;
  :**update children of the component**
  GO __Update Children__;
@enduml